/* Mini Calculator *
/* calc.y */

%{
#include  <iostream>
#include <string>
int yyerror(char *s);
int yylex(void);

void DebugOutput(const std::string& s){
	std::cout << s << std::endl;
}
%}

%union{
  int		int_val;
  std::string*	op_val;
}

%start	input 

%token <Symbol>	T_class
%type MainProgram
%type MainClass
%type Class
%type ClassDeclaration
%type Main
%type Identifier
%%

input: MainProgram 	

MainProgram: MainClass ClassDeclarationList {
	$$ = new IProgram($1, $2);}

MainClass: T_class Identifier T_lbrace 
	T_public T_static T_void T_main T_lparen T_string T_lbracket T_rbracket Identifier T_rparen T_lbrace
		Statement T_rbrace
	T_rbrace {
		$$ = new IClass($2, $12, $15);
		// IClass(Identifier, Identifier, Statement)
		} 

ClassDeclarationList:  
	| ClassDeclaration ClassDeclarationList {
		$$ = new ClassDeclarationList($1, $2);
		//ClassDeclarationList(ClassDeclaration, ClassDeclarationList)
	}

ClassDeclaration: T_class Identifier ClassExtend T_lbrace 
		VarDecList
		MethodDecList
	T_rbrace {
		$$ = new ClassDeclaration($2, $3, $5, $6);
		//ClassDeclaration(Identifier, ClassExtend, VarDecList, MethodList)
	} 	

ClassExtend: 
	| T_lparen T_extends Identifier T_rparen { 
		$$ = new ClassExtend($3); 
		//ClassExtend(Identifier)
	}				
	
VarDeclarationList: 
	| VarDeclaration VarDeclarationList {
		$$ = new VarDeclarationList($1, $2);
		//VarDeclarationList(VarDeclaration,VarDeclarationList)
	}	
	
VarDeclaration : Type Identifier T_semi {
		$$ = new VarDeclaration($1, $2);
		//VarDeclaration(Type, Identifier)
	}	
	
MethodDeclarationList:
	| MethodDeclaration MethodDeclarationList {
		$$ = new MethodDeclarationList($1, $2);
		//MethodDeclarationList(MethodDeclaration, MethodDeclarationList)
	}

MethodDeclaration: T_public Type Identifier T_lparen ArgumentList T_rparen T_lbrace
	VarDeclarationList StatementList T_return Expression T_semi T_rbrace {
		$$ = new MethodDeclaration($2, $3, $5, $8, $9, $11);
		//MethodDeclaration(Type, Identifier, ArgumentList, VarDeclarationList, StatementList, Expression)
	}		
	
ArgumentList:
	| Argument {
		$$ = ArgumentList($1, nullptr);
		// ArgumentList(Argument, nullptr)
	}
	| Argument T_comma ArgumentList {
		$$ = new ArgumentList($1, $3);
		//ArgumentList(Argument, ArgumentList)
	 }

Argument: Type Identifier

Type: T_int T_lbracket T_rbracket {
		$$ = new Type("INTLIST");
	}
	| T_boolean {
		$$ = new Type("BOOL");
	}
	| T_int {
		$$ = new Type("INT");
	}
	| Identifier {
		$$ = new Type($1);
		//Type(Identifier)
	}

StatementList: 
	| Statement StatementList {
		$$ = new StatementList($1, $2);
		//StatementList(Statement, StatementList)
	}

Statement: T_lbrace StatementList T_rbrace {
		$$ = new CompoundStatement($2);
		//CompoundStatement(StatementList)
	}
	| T_if T_lparen Expression T_rparen Statemet T_else Statement {
		$$ = new ConditionStatement($3, $5, $7);
		//CondtitionStatement(Expression, Statement, Statement)
	}
	| T_while T_lparen Expression T_rparen Statemet {
		$$ = new PreconditionStatement($3, $5);
		//PreconditionStatement(Expression, Statement)
	}
	| T_sop  T_lparen Expression T_rparen T_semi {
		$$ = new PrintStatement($3);
		//PrintStatement(Expression)
	}
	| Identifier T_equal Expression T_semi {
		$$ = new AssignmentStatement($1, $3);
		//AssignmentStatement(Identifier, Expression)
	}
	| Identifier T_lbracket Expression T_rbracket T_equal Expression T_semi {
		$$ = AssignmentListStatement($1, $3, $6);
		//AssignmentListStatement(Identifier, Expression, Expression)
	}

Identifier: T_id {
		$$ = new IdExpression($2);
		//IdExpression(string);
	}


%%

int yyerror(std::string s)
{
  extern int yylineno;	// defined and maintained in lex.c
  extern char *yytext;	// defined and maintained in lex.c
  
  std::cerr << "ERROR: " << s << " at symbol \"" << yytext;
  std::cerr << "\" on line " << yylineno << std::endl;
  exit(1);
}

int yyerror(char *s)
{
	return yyerror(std::string(s));
}

